<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web Oriented on Kubirds</title><link>https://kubirds.com/docs/dockerized-supervision/web/</link><description>Recent content in Web Oriented on Kubirds</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://kubirds.com/docs/dockerized-supervision/web/index.xml" rel="self" type="application/rss+xml"/><item><title>Ensure Availability</title><link>https://kubirds.com/docs/dockerized-supervision/web/availability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubirds.com/docs/dockerized-supervision/web/availability/</guid><description>Use Case &amp;#8592; Consider reading first Web Oriented Your web service is located at https://api.example.com/my-service
It exposes a route /_health that should return a 200 - OK response when everything is fine.
How To Create the following Unit resource:
--- apiVersion: kubirds.com/v1 kind: Unit metadata: name: check-my-service-access namespace: default labels: app: my-service spec: schedule: every 5 minutes image: name: curlimages/curl:latest command: &amp;#34;curl -L -v $HOST&amp;#34; pullPolicy: Always env: - name: HOST value: https://api.</description></item><item><title>Notify Slack</title><link>https://kubirds.com/docs/dockerized-supervision/web/notify/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubirds.com/docs/dockerized-supervision/web/notify/</guid><description>Use Case &amp;#8592; Consider reading first Ensure Availability You have configured a Slack Webhook to receive notifications from your monitoring.
How To Create a secret containing the URL of your webhook:
--- apiVersion: v1 kind: Secret metadata: name: my-slack-webhook namespace: default stringData: URL: &amp;#34;&amp;lt;your slack webhook URL&amp;gt;&amp;#34; Then create the following Reactor resource:
--- apiVersion: kubirds.com/v1 kind: Reactor metadata: name: slack-notifier namespace: default spec: unitSelector: app: my-service triggers: successful: no failed: no fixed: yes regression: yes image: name: curlimages/curl:latest pullPolicy: Always command: &amp;gt;curl -X POST $HOST -H &amp;#34;Content-Type: application/json&amp;#34; \ -d &amp;#34;{ \&amp;#34;text\&amp;#34;: \&amp;#34;state: $UNIT_STATE\&amp;#34; }&amp;#34; env: - name: HOST valueFrom: secretKeyRef: name: my-slack-webhook key: URL The unitSelector property selects the units (by label) that need to trigger this reactor.</description></item><item><title>Plan</title><link>https://kubirds.com/docs/dockerized-supervision/web/plan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubirds.com/docs/dockerized-supervision/web/plan/</guid><description>Use Case &amp;#8592; Consider reading first Notify Slack You planned an upgrade every weekend when there is no activity on your web service.
There is a service interruption during the upgrade, to apply database migrations.
You don&amp;rsquo;t want to be notified by your monitoring that your service is down during the upgrade.
How To Create the following Kubernetes resource:
--- apiVersion: kubirds.com/v1 kind: Inhibitor metadata: name: weekly-upgrade namespace: default spec: startDate: &amp;#34;2020-09-19T00:00:00.</description></item><item><title>Reusability</title><link>https://kubirds.com/docs/dockerized-supervision/web/reuse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubirds.com/docs/dockerized-supervision/web/reuse/</guid><description>Recap &amp;#8592; Consider reading first Plan So far, we&amp;rsquo;ve deployed our web service, we&amp;rsquo;ve created a Unit to monitor it, a Reactor to notify our Ops team and an Inhibitor to shut down monitoring during upgrades.
Think generic While the Unit is specific to our web service, the Reactor and Inhibitor are not and could (should) be re-used with other units.
One possible way to do this is through the unit&amp;rsquo;s labels:</description></item></channel></rss>