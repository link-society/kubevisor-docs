<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Kubevisor</title><link>https://kubevisor.io/</link><description>Recent content in Home on Kubevisor</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://kubevisor.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Company</title><link>https://kubevisor.io/legals/company/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/legals/company/</guid><description>Identification Corporate Name Link Society Legal Form SAS Share Capital 3â‚¬ Address 3rd Saint Lugles Street, Lillers 62190, France Website https://link-society.com (fr) Phone Number (+33) 07 82 16 83 10 E-Mail contact@link-society.com Host Corporate Name Github, Inc. Legal Form Subsidiary Address San Francisco, California, USA</description></item><item><title>Container contract</title><link>https://kubevisor.io/docs/concepts/reactor/container-contract/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/docs/concepts/reactor/container-contract/</guid><description>In order to use a Docker image as a Reactor, it is mandatory that the image respects the following constraints:
no ENTRYPOINT, Tekton will overwrite it when scheduling the check execution no CMD, Kubevisor will overwrite it when creating the check pipeline presence of /bin/sh, it will be used as main shell for the container&amp;rsquo;s CMD script The following environment variables will be provided at runtime:
Variable Example Description UNIT_OUTPUT /tmp/unit-output Path to the file containing the last 2048 bytes of the unit&amp;rsquo;s output UNIT_STATE 0 Unit&amp;rsquo;s exit code</description></item><item><title>Container contract</title><link>https://kubevisor.io/docs/concepts/unit/container-contract/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/docs/concepts/unit/container-contract/</guid><description>In order to use a Docker image as a Unit, it is mandatory that the image respects the following constraints:
no ENTRYPOINT, Tekton will overwrite it when scheduling the check execution no CMD, Kubevisor will overwrite it when creating the unit pipeline presence of /bin/sh, it will be used as main shell for the container&amp;rsquo;s CMD script</description></item><item><title>Ensure Availability</title><link>https://kubevisor.io/docs/dockerized-supervision/web/availability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/docs/dockerized-supervision/web/availability/</guid><description>Use Case &amp;#8592; Consider reading first Web Oriented Your web service is located at https://api.example.com/my-service
It exposes a route /_health that should return a 200 - OK response when everything is fine.
How To Create the following Unit resource:
--- apiVersion: kubevisor.io/v1 kind: Unit metadata: name: check-my-service-access namespace: default labels: app: my-service spec: schedule: every 5 minutes image: name: curlimages/curl:latest command: &amp;#34;curl -L -v $HOST&amp;#34; pullPolicy: Always env: - name: HOST value: https://api.</description></item><item><title>Persistent Volume</title><link>https://kubevisor.io/docs/dockerized-supervision/data/volume/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/docs/dockerized-supervision/data/volume/</guid><description>Use Case &amp;#8592; Consider reading first Data Oriented You have a Docker image example/test-suite:latest providing a command run-test-suite.
The command produce a JUnit report to /tmp/report.xml.
You have a webhook accepting JUnit reports for further business logic.
How-To First, create a persistent volume to store your report:
--- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: my-testsuite-workspace-pvc namespace: default spec: storageClassName: default accessModes: - ReadWriteOnce - ReadOnly resources: requests: storage: 10Mi Then mount the volume on your unit:</description></item><item><title>Scheduling</title><link>https://kubevisor.io/docs/concepts/inhibitor/scheduling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/docs/concepts/inhibitor/scheduling/</guid><description/></item><item><title>System Overview</title><link>https://kubevisor.io/docs/concepts/architecture/system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/docs/concepts/architecture/system/</guid><description/></item><item><title>Container Overview</title><link>https://kubevisor.io/docs/concepts/architecture/container/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/docs/concepts/architecture/container/</guid><description/></item><item><title>Data Access</title><link>https://kubevisor.io/docs/dockerized-supervision/data/access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/docs/dockerized-supervision/data/access/</guid><description>Introduction &amp;#8592; Consider reading first Persistent Volume In the previous example, we created a strong coupling between the unit and its reactor.
Because they reference the same persistent volume, the reactor cannot be used with another unit.
Reactors should access the persistent volume in ReadOnly access mode, while units should access it in ReadWriteOnce access mode (preventing parallel writes).
Use Case You have a unit predict performing predictions based on a ML model.</description></item><item><title>Notify Slack</title><link>https://kubevisor.io/docs/dockerized-supervision/web/notify/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/docs/dockerized-supervision/web/notify/</guid><description>Use Case &amp;#8592; Consider reading first Ensure Availability You have configured a Slack Webhook to receive notifications from your monitoring.
How To Create a secret containing the URL of your webhook:
--- apiVersion: v1 kind: Secret metadata: name: my-slack-webhook namespace: default stringData: URL: &amp;#34;&amp;lt;your slack webhook URL&amp;gt;&amp;#34; Then create the following Reactor resource:
--- apiVersion: kubevisor.io/v1 kind: Reactor metadata: name: slack-notifier namespace: default spec: unitSelector: app: my-service triggers: successful: no failed: no fixed: yes regression: yes image: name: curlimages/curl:latest pullPolicy: Always command: &amp;gt;curl -X POST $HOST -H &amp;#34;Content-Type: application/json&amp;#34; \ -d &amp;#34;{ \&amp;#34;text\&amp;#34;: \&amp;#34;state: $UNIT_STATE\&amp;#34; }&amp;#34; env: - name: HOST valueFrom: secretKeyRef: name: my-slack-webhook key: URL The unitSelector property selects the units (by label) that need to trigger this reactor.</description></item><item><title>Schema</title><link>https://kubevisor.io/docs/concepts/inhibitor/schema/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/docs/concepts/inhibitor/schema/</guid><description> API Group Version Kind kubevisor.io v1 Inhibitor Inhibitor Name Type Description spec InhibitorSpec Specification of the desired behavior InhibitorSpec Name Type Description schedule string Describe when the unit must be inhibited. RRule in human readable format or standard format (see RRule Spec), ie: every 5 minutes duration string Describe how long the unit must be inhibited, ie: 1 hour startDate string Describe the beginning of the schedule, ISO formated date and time unitSelector Map Kubernetes labels used to select units to inhibit</description></item><item><title>Schema</title><link>https://kubevisor.io/docs/concepts/reactor/schema/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/docs/concepts/reactor/schema/</guid><description>API Group Version Kind kubevisor.io v1 Reactor Reactor Name Type Description spec ReactorSpec Specification of the desired behavior ReactorSpec Name Type Description image Image Describe the Docker image to use for the reactor env EnvVar array List of environment variables to set in the container envFrom EnvFromSource array List of sources to populate environment variables in the container volumes Volume array List of volumes to mount in the container unitSelector Map Kubernetes labels used to select units to inhibit triggers Triggers Describe when the reactor should run Image Name Type Description name string Docker image name (ie: alpine:latest) pullPolicy ImagePullPolicy When to pull the image command string Command to execute inside the container ImagePullPolicy One of:</description></item><item><title>Schema</title><link>https://kubevisor.io/docs/concepts/unit/schema/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/docs/concepts/unit/schema/</guid><description>API Group Version Kind kubevisor.io v1 Unit Unit Name Type Description spec UnitSpec Specification of the desired behavior UnitSpec Name Type Description schedule string Describe when the unit must be inhibited. RRule in human readable format or standard format (see RRule Spec), ie: every 5 minutes image Image Describe the Docker image to use for the reactor historySize integer Describe how many recent PipelineRun resources should be kept env EnvVar array List of environment variables to set in the container envFrom EnvFromSource array List of sources to populate environment variables in the container volumes Volume array List of volumes to mount in the container Image Name Type Description name string Docker image name (ie: alpine:latest) pullPolicy ImagePullPolicy When to pull the image command string Command to execute inside the container ImagePullPolicy One of:</description></item><item><title>Terms of service</title><link>https://kubevisor.io/legals/terms-of-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/legals/terms-of-service/</guid><description>Website Terms and Conditions of Use 1. Terms By accessing this Website, accessible from https://kubevisor.io, you are agreeing to be bound by these Website Terms and Conditions of Use and agree that you are responsible for the agreement with any applicable local laws. If you disagree with any of these terms, you are prohibited from accessing this site. The materials contained in this Website are protected by copyright and trade mark law.</description></item><item><title>Component Overview</title><link>https://kubevisor.io/docs/concepts/architecture/component/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/docs/concepts/architecture/component/</guid><description> Operator Dashboard Message Exchange</description></item><item><title>Plan</title><link>https://kubevisor.io/docs/dockerized-supervision/web/plan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/docs/dockerized-supervision/web/plan/</guid><description>Use Case &amp;#8592; Consider reading first Notify Slack You planned an upgrade every weekend when there is no activity on your web service.
There is a service interruption during the upgrade, to apply database migrations.
You don&amp;rsquo;t want to be notified by your monitoring that your service is down during the upgrade.
How To Create the following Kubernetes resource:
--- apiVersion: kubevisor.io/v1 kind: Inhibitor metadata: name: weekly-upgrade namespace: default spec: startDate: &amp;#34;2020-09-19T00:00:00.</description></item><item><title>Privacy policy</title><link>https://kubevisor.io/legals/privacy-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/legals/privacy-policy/</guid><description>Privacy Policy for Link-Society At kubevisor.io, accessible from https://kubevisor.io, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by kubevisor.io and how we use it.
If you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us.
General Data Protection Regulation (GDPR) We are a Data Controller of your information.</description></item><item><title>Reusability</title><link>https://kubevisor.io/docs/dockerized-supervision/web/reuse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/docs/dockerized-supervision/web/reuse/</guid><description>Recap &amp;#8592; Consider reading first Plan So far, we&amp;rsquo;ve deployed our web service, we&amp;rsquo;ve created a Unit to monitor it, a Reactor to notify our Ops team and an Inhibitor to shut down monitoring during upgrades.
Think generic While the Unit is specific to our web service, the Reactor and Inhibitor are not and could (should) be re-used with other units.
One possible way to do this is through the unit&amp;rsquo;s labels:</description></item><item><title>About us</title><link>https://kubevisor.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/about/</guid><description>Who are we ? Link Society is a french company built by two passionate engineers: David Delassus and Jonathan LabÃ©jof.
We first met in 2013 as we joined the same developper team. After 3 years, we quit our jobs and started our own business as a software editor.
Our goal is simple:
Providing the user the tools he needs
And to accomplish that goal, we include the end-user in the design phase of our projects.</description></item><item><title>Contact by mail</title><link>https://kubevisor.io/contact/mail/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/contact/mail/</guid><description/></item><item><title>Contact by phone</title><link>https://kubevisor.io/contact/phone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/contact/phone/</guid><description/></item><item><title>Getting Started</title><link>https://kubevisor.io/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/getting-started/</guid><description>Introduction Kubevisor brings easy supervision to your infrastructure. It provides a simple way to declare how it should be monitored and takes care of the rest with Kubernetes.
The whole operator revolves around 3 concepts:
Units The base element of your supervision. A Unit describes a task that must execute periodically and should succeed every time.
For more information, consult the documentation.
Reactors This is where the logic happens. A Reactor describes what should happen after the execution of a Unit.</description></item><item><title>Products and Services</title><link>https://kubevisor.io/products/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/products/</guid><description/></item><item><title>Products and Services</title><link>https://kubevisor.io/services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevisor.io/services/</guid><description/></item></channel></rss>